// backend/app/controllers/contatoController.js
const contatoService = require('../services/contatoService')

const list = async (req, res, next) => {
  try {
    console.log('üîç Buscando todos os contatos do banco');
    
    // Buscar TODOS os contatos, n√£o por usu√°rio
    const contatos = await contatoService.getAllContatos()
    console.log('üîç Total de contatos encontrados:', contatos.length);
    
    res.json({ success: true, data: contatos })
  } catch (error) {
    console.error('‚ùå Erro ao listar contatos:', error)
    next(error)
  }
}

const create = async (req, res, next) => {
  try {
    // Ainda podemos manter o created_by para auditoria
    const contatoData = {
      ...req.body,
      usuario_id: req.user?.id || null // Opcional agora
    }
    
    const novoContato = await contatoService.createContato(contatoData)
    res.status(201).json({ success: true, data: novoContato })
  } catch (error) {
    console.error('‚ùå Erro ao criar contato:', error)
    next(error)
  }
}

const update = async (req, res, next) => {
  try {
    const { id } = req.params
    const contatoData = req.body
    
    const contatoAtualizado = await contatoService.updateContato(id, contatoData)
    res.json({ success: true, data: contatoAtualizado })
  } catch (error) {
    console.error('‚ùå Erro ao atualizar contato:', error)
    next(error)
  }
}

const remove = async (req, res, next) => {
  try {
    const { id } = req.params
    
    await contatoService.deleteContato(id)
    res.json({ success: true, message: 'Contato exclu√≠do com sucesso' })
  } catch (error) {
    console.error('‚ùå Erro ao excluir contato:', error)
    next(error)
  }
}
// No contatoController.js, o m√©todo toggleStatus deve estar assim:

const toggleStatus = async (req, res, next) => {
  try {
    const { id } = req.params
    const { ativo } = req.body
    
    console.log('üîÑ Controller: alterando status do contato ID:', id, 'para:', ativo);
    console.log('üîÑ Controller: dados recebidos no body:', req.body);
    
    // Validar se o par√¢metro ativo foi fornecido
    if (ativo === undefined || ativo === null) {
      console.error('‚ùå Controller: par√¢metro ativo n√£o fornecido');
      return res.status(400).json({ 
        success: false, 
        error: 'Par√¢metro "ativo" √© obrigat√≥rio' 
      })
    }
    
    // Validar se √© um valor boolean v√°lido
    if (typeof ativo !== 'boolean' && ativo !== 0 && ativo !== 1 && ativo !== '0' && ativo !== '1') {
      console.error('‚ùå Controller: valor de ativo inv√°lido:', ativo);
      return res.status(400).json({ 
        success: false, 
        error: 'Par√¢metro "ativo" deve ser boolean, 0 ou 1' 
      })
    }
    
    const contatoAtualizado = await contatoService.updateContatoStatus(id, ativo)
    
    console.log('‚úÖ Controller: status alterado com sucesso:', contatoAtualizado);
    res.json({ success: true, data: contatoAtualizado })
    
  } catch (error) {
    console.error('‚ùå Controller: erro ao alterar status:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message || 'Erro interno do servidor' 
    });
  }
}


module.exports = {
  list,
  create,
  update,
  remove,
  toggleStatus
}
